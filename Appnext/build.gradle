plugins {
    id 'com.android.library'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "${appnext_ads_v}"

        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        release {
            buildConfigField "String", "NETWORK_VERSION", "\"${appnext_version}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            buildConfigField "String", "NETWORK_VERSION", "\"${appnext_version}\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


ext{
    PROJ_GROUP="com.tradplus.ads.appnext"
    PROJ_DESCRIPTION="tradplus-appnext"
    PROJ_ARTIFACTID="tradplus-appnext"//包名
    PROJ_VERSION=appnext_ads_v
    PROJ_REPO="tradplus-appnext"
    PROJ_NAME = "tradplus-appnext"
    PROJ_VCSURL="https://github.com/tradplus.keystore/sdk.git"
    PROJ_WEBSITEURL="https://github.com/tradplus.keystore/sdk"

    DEVELOPER_ID=""
    DEVELOPER_NAME="you accout name"
    DEVELOPER_EMAIL=""
}


repositories {
    mavenCentral()
    jcenter()
    google()

    if ((useMaven as int == 0 )) {
        if (isDev as int == 0) {
            println("引用 'aar' ")
            flatDir {
                dirs project(':flute-sdk').file('aar')
            }
        }
    }

}


dependencies {

    if (useMaven as int == 1) {
        compileOnly project(':flute-sdk')
    } else {
        if (isDev as int == 1) {
            compileOnly project(':flute-sdk')
        } else {
            println("引用tradplus-sdk-android.aar")
            compileOnly (name: 'tradplus-sdk-android', ext: 'aar')
        }
    }
    compileOnly 'com.google.android.gms:play-services-ads-identifier:17.0.0'
    compileOnly 'androidx.annotation:annotation:1.1.0' // Mandatory
    compileOnly "androidx.work:work-runtime:2.4.0"  // Mandatory
    compileOnly 'com.github.bumptech.glide:glide:4.11.0' // Mandatory
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0' // Mandatory
    // For the Interstitial and Rewarded/Fullscreen video ad unit:
    compileOnly "com.appnext.sdk:ads:${appnext_version}"
    // For the Banners ad unit:
    compileOnly "com.appnext.sdk:banners:${appnext_version}"
    // For the New Native Ads ad unit:
    compileOnly "com.appnext.sdk:native-ads2:${appnext_version}"
}

android.libraryVariants.all {
    variant-> variant.outputs.all{
        outputFileName = "appnext_ads"+"_${appnext_ads_v}."+'aar'
    }
        variant.getAssembleProvider().configure() {
            it.doLast {
                variant.outputs.all { output ->
                    def outputPath = [project.rootDir.absolutePath, "build", "outputs", "appnext"].join(File.separator)
                    copy {
                        from output.outputFile
                        into outputPath
                    }
                }
            }
        }
}

task moveNetworkaar(type: Copy) {

    println "----------> ARR copy start <-----------"
    def buildPath = project.files("appnext").from("network_libs")
    //AAR所在的编译路径
    from buildPath
    //AAR所拷贝的目录
    def outputPath = [project.rootDir.absolutePath, "build", "outputs", "appnext"].join(File.separator)
    println "outputPath = " + outputPath
    into outputPath

    println "----------> ARR copy succeeded <-----------"
}


android {
    lintOptions {
        abortOnError false
    }
}
//开源gradle
apply from: '../bintray.gradle'