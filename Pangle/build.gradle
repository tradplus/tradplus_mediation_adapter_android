apply plugin: 'com.android.library'

android {

    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionName "${pangle_ads_v}"
        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        release {
            buildConfigField "String", "NETWORK_VERSION", "\"${pangle_os_version}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            buildConfigField "String", "NETWORK_VERSION", "\"${pangle_os_version}\""
        }
    }

}
repositories {
    if ((useMaven as int == 0 )) {
        if (isDev as int == 0) {
            println("引用 'aar' ")
            flatDir {
                dirs project(':flute-sdk').file('aar')
            }
        }
    }
}
ext {
    PROJ_GROUP = "com.tradplus.ads.tt_fpangolin"
    PROJ_DESCRIPTION = "tradplus-pangle"
    PROJ_ARTIFACTID = "tradplus-pangle"//包名
    PROJ_VERSION = pangle_ads_v
    PROJ_REPO = "tradplus-pangle"
    PROJ_NAME = "tradplus-pangle"
    PROJ_VCSURL = "https://github.com/tradplus.keystore/sdk.git"
    PROJ_WEBSITEURL = "https://github.com/tradplus.keystore/sdk"

    DEVELOPER_ID = ""
    DEVELOPER_NAME = "you accout name"
    DEVELOPER_EMAIL = ""
}
dependencies {

//    compileOnly fileTree(include: ['*.aar'], dir: 'libs')
    compileOnly "com.pangle.global:ads-sdk:${pangle_os_version}"
//    compileOnly "com.pangle.global:ads-sdk-beta:${pangle_os_version}"

    if(isAndroidSupport as int == 0){
        compileOnly 'com.google.android.gms:play-services-ads-identifier:17.0.0'
    }else{
        compileOnly 'com.google.android.gms:play-services-ads-identifier:16.0.0'
    }

    if (useMaven as int == 1) {
        compileOnly project(':flute-sdk')
    } else {
        println("isDev===" + isDev)
        if (isDev as int == 1) {
            println("isDev===if" + isDev)
            compileOnly project(':flute-sdk')
        } else {
            println("引用tradplus-sdk-android.aar")
            compileOnly (name: 'tradplus-sdk-android', ext: 'aar')
        }
    }
}

android.libraryVariants.all {
    variant ->
        variant.outputs.all {
            outputFileName = "pangle_ads" + "_${pangle_ads_v}." + 'aar'
        }
        variant.getAssembleProvider().configure() {
            it.doLast {
                variant.outputs.all { output ->
                    def outputPath = [project.rootDir.absolutePath, "build", "outputs", "pangle"].join(File.separator)
                    copy {
                        from output.outputFile
                        into outputPath
                    }
                }
            }
        }
}

task moveNetworkaar(type: Copy) {

    println "----------> ARR copy start <-----------"
    def buildPath = project.files("fpangolin_ads").from("libs")
    //AAR所在的编译路径
    from buildPath
    //AAR所拷贝的目录
    def outputPath = [project.rootDir.absolutePath, "build", "outputs", "pangle"].join(File.separator)
    println "outputPath = " + outputPath
    into outputPath

    println "----------> ARR copy succeeded <-----------"
}

//开源gradle
apply from: '../bintray.gradle'