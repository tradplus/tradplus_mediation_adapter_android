apply plugin: 'com.android.library'
apply plugin: "com.cpdroid.fat-aar"

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "${unity_ads_v}"
        consumerProguardFiles 'proguard-rules.pro'

//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            buildConfigField "String", "NETWORK_VERSION", "\"${unity_version}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            buildConfigField "String", "NETWORK_VERSION", "\"${unity_version}\""
        }
    }

}
ext{
    PROJ_GROUP="com.tradplus.ads.tradplus-unity"
    PROJ_DESCRIPTION="tradplus-unity"
    PROJ_ARTIFACTID="tradplus-unity"//包名
    PROJ_VERSION=unity_ads_v
    PROJ_REPO="tradplus-unity"
    PROJ_NAME = "tradplus-unity"
    PROJ_VCSURL="https://github.com/tradplus.keystore/sdk.git"
    PROJ_WEBSITEURL="https://github.com/tradplus.keystore/sdk"

    DEVELOPER_ID=""
    DEVELOPER_NAME="you accout name"
    DEVELOPER_EMAIL=""
}
repositories {
    mavenCentral()
    jcenter()
    google()

     if ((useMaven as int == 0 )) {
        if (isDev as int == 0) {
            println("引用 'aar' ")
            flatDir {
                dirs project(':flute-sdk').file('aar')
            }
        }
    }

}

dependencies {

//    compileOnly fileTree(include: ['*.aar'], dir: 'libs')
    compileOnly "com.unity3d.ads:unity-ads:${unity_version}"
    if(useMaven as int ==1){

        compileOnly project(':flute-sdk')
    }else {
        if(isDev as int == 1){
              
            compileOnly project(':flute-sdk')
        }else {
            println("引用tradplus-sdk-android.aar")
            compileOnly (name: 'tradplus-sdk-android', ext: 'aar')
        }
    }


}

android.libraryVariants.all {
    variant-> variant.outputs.all{
        outputFileName = "unity_ads"+"_${unity_ads_v}."+'aar'
    }
        variant.getAssembleProvider().configure() {
            it.doLast {
                variant.outputs.all { output ->
                    def outputPath = [project.rootDir.absolutePath, "build", "outputs", "unityads"].join(File.separator)
                    copy {
                        from output.outputFile
                        into outputPath
                    }
                }
            }
        }
}

task moveNetworkaar(type: Copy) {

    println "----------> ARR copy start <-----------"
    def buildPath = project.files("flute-unity").from("libs")
    //AAR所在的编译路径
    from buildPath
    //AAR所拷贝的目录
    def outputPath = [project.rootDir.absolutePath, "build", "outputs", "unityads"].join(File.separator)
    println "outputPath = " + outputPath
    into outputPath

    println "----------> ARR copy succeeded <-----------"
}

android {
    lintOptions {
        abortOnError false
    }
}
//开源gradle
apply from: '../bintray.gradle'